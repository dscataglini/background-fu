BackgroundFu
============

Background tasks made dead simple.
Any resemblance to ActiveRecord is purely coincidental.

Four things:

1. If you have more than one Mongrel in your setup AND you want to be able to 
  retrieve progress of a job or have the ability to stop it, you have to make 
  your sessions "sticky". This will cause your browser to always hit the same 
  mongrel (threads are tied to a Mongrel process). HAProxy can do that for you.

2. One, single Ruby thread can block your entire process if it blocks
   (dns queries, etc.). Keep that in mind.

3. You don't have to remember to set allow_concurrency, BackgroundFu does that.

4. You don't have to worry about stale database connections left after
   finished threads. BackgroundFu closes them.


Example
=======

In lib/hard_worker.rb (or anywhere else):

class HardWorker

  def download_internets(options = {})
    @progress = 0

    sniff_the_tubes(options)
    @progress = 20

    internets = pull_the_tubes(options)
    @progress = 100

    internets
  end
  
  def sniff_the_tubes(options)
    sleep(10)
  end
  
  def pull_the_tubes(options)
    sleep(10)
    
    "porn"
  end

end


In a controller:

  def create
    session[:job_id] = Background.jobs.create(HardWorker, :download_internets, params[:options]).id
  end

  def show
    @job      = Background.jobs.find(session[:job_id])
    @progress = @job.progress
    @result   = @job.result if @job.finished?
  end
  
  def index
    @jobs = Background.jobs
  end
  
  def destroy
    id = session[:job_id]
    Background.jobs.find(id).destroy
  end
  
Enjoy!

Copyright (c) 2007 Jacek Becela, released under the MIT license