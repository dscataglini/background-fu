BackgroundFu
============

Background tasks made dead simple.

GitHub:
  git://github.com/ncr/background-fu.git

Lighthouse (free account required):
  http://trix.lighthouseapp.com/projects/9809-backgroundfu/overview
  
Campfire (guest access, no account required):
  http://ncr.campfirenow.com/67482
  
If you want to help improve this plugin, feel free to use above to contact me. Fork the project on GitHub, implement a feature, send me a pull request.

Subversion (deprecated, will be available, but will not mirror github commits):
  https://svn.trix.pl/public/background_fu/
  


Bonus features
==============

There are bonus features available if you set
ActiveRecord::Base.allow_concurrency = true 
in your environment.

These features are: 
 * monitoring progress (perfect for ajax progress bars)
 * stopping a running worker in a merciful way.

Read the code (short and easy) to discover them.

Quick Start
===========

./script/plugin install git://github.com/ncr/background-fu.git

ruby ./script/generate background
rake db:migrate
ruby ./script/daemons start

then try in console:
    
job_id = Job.enqueue!(ExampleWorker, :add, 1, 2).id
    
...  and after few seconds when background daemon completes the job ...
    
Job.find(job_id).result should equal 3


Examples
========

In lib/workers/example_worker.rb:

# Simple, non-monitored worker.
class ExampleWorker
  
  def add(a, b)
    a + b
  end

end

In lib/workers/example_monitored_worker.rb:

# Remeber to include BackgroundFu::WorkerMonitoring.
class ExampleMonitoredWorker

  include BackgroundFu::WorkerMonitoring
  
  def long_and_monitored
    my_progress = 0
    
    record_progress(my_progress)

    while(my_progress < 100)
      my_progress += 1
      record_progress(my_progress)
      sleep 1
    end
    
    record_progress(100)
  end
  
end

In a controller:

  def create
    session[:job_id] = Job.enqueue!(ExampleWorker, :add, 1, 2).id
    # or try the monitored worker: session[:job_id] = Job.enqueue!(ExampleMonitoredWorker, :long_and_monitored)
  end

  def show
    @job    = Job.find(session[:job_id])
    @result = @job.result if @job.finished?
    # or check progress if your worker is monitored: @progress = @job.progress
  end
  
  def index
    @jobs = Job.find(:all)
  end
  
  def destroy
    Job.find(session[:job_id]).destroy
  end

Handy Capistrano tasks:

namespace :deploy do

  desc "Run this after every successful deployment" 
  task :after_default do
    restart_background_fu
  end

end

desc "Restart BackgroundFu daemon"
task :restart_background_fu do
  run "RAILS_ENV=production ruby #{current_path}/script/daemons stop"
  run "RAILS_ENV=production ruby #{current_path}/script/daemons start"
end

  
Enjoy!

Copyright (c) 2007 Jacek Becela, released under the MIT license
