BackgroundFu
============

Background tasks made dead simple.
Any resemblance to ActiveRecord is purely coincidental.

Bonus features
==============

There are bonus features available if you enable multithreading in AR.

These are: 
 * monitoring progress (perfect for ajax progress bars)
 * stopping a running worker in a merciful way.

Read the code (short and easy) to discover them.


Quick Start
===========

This plugin previously depended on Kyle Maxwell's daemon_generator plugin from
http://svn.kylemaxwell.com/rails_plugins/daemon_generator/trunk but since it is not
available now, I copied all the needed files.

./script/generate background

rake db:migrate

./script/daemons start
    

then try in console:
    
job_id = Background.jobs.create(ExampleWorker, :add, 1, 2).id
    
...  and after few seconds when background daemon completes the job ...
    
Background.jobs.find(job_id).result should equal 3


Example
=======

In lib/workers/example_worker.rb:

# Simple, non-monitored worker, for those who don't believe in multi-threading.
class ExampleWorker
  
  def add(a, b)
    a + b
  end

end

# Bonus features available if allow_concurrency is set to true!
# Remeber to include Background::MonitoredWorker.
# Every place where record_progress is invoked is a possible stopping place.

class ExampleMonitoredWorker

  include Background::WorkerMonitoring
  
  def long_and_monitored
    my_progress = 0
    
    record_progress(my_progress)

    while(my_progress < 100)
      my_progress += 1
      record_progress(my_progress)
      sleep 1
    end
    
    record_progress(100)
  end
  
end

In a controller:

  def create
    session[:job_id] = Background.jobs.create(ExampleWorker, :add, 1, 2).id
  end

  def show
    @job      = Background.jobs.find(session[:job_id])
    @result   = @job.result if @job.finished?
  end
  
  def index
    @jobs = Background.jobs
  end
  
  def destroy
    id = session[:job_id]
    Background.jobs.find(id).destroy
  end

Handy Capistrano tasks:

namespace :deploy do

  desc "Run this after every successful deployment" 
  task :after_default do
    restart_background_fu
  end

end

desc "Restart BackgroundFu daemon"
task :restart_background_fu do
  run "RAILS_ENV=production ruby #{current_path}/script/daemons stop"
  run "RAILS_ENV=production ruby #{current_path}/script/daemons start"
end

  
Enjoy!

Copyright (c) 2007 Jacek Becela, released under the MIT license
